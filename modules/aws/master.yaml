AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Lambda sample environment template


Parameters:

  TwitterConsumerKey:
    Type: String
    NoEcho: true
  TwitterConsumerSecret:
    Type: String
    NoEcho: true
  TwitterAccessToken:
    Type: String
    NoEcho: true
  TwitterAccessTokenSecret:
    Type: String
    NoEcho: true


Resources:

  # ##############################
  # IAM

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: [ "sts:AssumeRole" ]
            Principal:
              Service: [ lambda.amazonaws.com ]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  # ##############################
  # lambda

  EventRuleForFetchTweets:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0/15 * * * ? *)'
      Targets:
        - Arn: !GetAtt 'LambdaFetchTweets.Arn'
          Id: !Ref 'LambdaFetchTweets'
  LambdaPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref 'LambdaFetchTweets'
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'EventRuleForFetchTweets.Arn'

  LambdaFetchTweets:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./dist/lambda
      Handler: bundle.fetchTweets
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10
      Environment:
        Variables:
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
      MemorySize: 512
      Timeout: 10

  # ##############################
  # dynamo

  DDBTRaws:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TwitterFilter_RawTweets
      AttributeDefinitions:
        - AttributeName: TweetId
          AttributeType: S
      KeySchema:
        - AttributeName: TweetId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  DDBKVS:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TwitterFilter_KVS
      AttributeDefinitions:
        - AttributeName: Key
          AttributeType: S
      KeySchema:
        - AttributeName: Key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # ##############################
  # cognito

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt 'AppRole.Arn'


Outputs:
  IdentityPoolId:
    Value: !Ref IdentityPool
